{"version":3,"sources":["../src/index.ts"],"names":["getHref","isInBinance","getWagmiConnector","getWalletConnectUri","connector","provider","resolve","rainbowConnector","chains","options","shouldUseWalletConnect","Connector","uri"],"mappings":"AACA,OAAS,WAAAA,EAAS,eAAAC,MAAmB,qBACrC,OAAS,qBAAAC,MAAyB,+BAIlC,eAAeC,EAAoBC,EAAuC,CACxE,IAAMC,EAAW,MAAMD,EAAU,YAAY,EAC7C,OAAO,IAAI,QAAiBE,GAAYD,EAAS,KAAK,YAAaC,CAAO,CAAC,CAC7E,CAOe,SAARC,EAAkC,CACvC,OAAAC,EACA,QAAAC,CACF,EAA8B,CAC5B,IAAMC,EAAyB,CAACT,EAAY,EAC5C,MAAO,CACL,GAAI,UACJ,KAAM,sBAEN,QAAS,SAIA,8BADiB,KAAM,QAAO,6BAAqB,GAAG,UAI/D,WAAY,UACZ,eAAgB,UAChB,UAAWA,EAAY,GAAK,OAC5B,aAAc,CACZ,QAAS,gEACT,IAAK,wEACL,OAAQ,sCACR,OAAQ,qCACV,EAEA,gBAAiB,IAAM,CACrB,IAAMU,EAAYT,EAAkB,EAC9BE,EAAY,IAAIO,EAAU,CAC9B,OAAAH,EACA,QAAS,CAAE,gBAAiB,GAAO,GAAGC,CAAQ,CAChD,CAAC,EAWD,MAAO,CACL,UAAAL,EACA,OAAQ,CACN,OAAQM,EAbS,SAAY,CAC/B,IAAME,EAAM,MAAMT,EAAoBC,CAAS,EAC/C,OAAOJ,EAAQ,GAAMY,CAAG,CAC1B,EAUoD,MAClD,EACA,OAAQF,EACJ,CACE,OAZS,SACH,MAAMP,EAAoBC,CAAS,EAYzC,aAAc,CACZ,aACE,8FACF,MAAO,CACL,CACE,YACE,8DACF,KAAM,UACN,MAAO,kBACT,EACA,CACE,YACE,uDACF,KAAM,SACN,MAAO,2BACT,EACA,CACE,YACE,kFACF,KAAM,OACN,MAAO,qBACT,CACF,CACF,CACF,EACA,MACN,CACF,CACF,CACF","sourcesContent":["import { IWCEthRpcConnectionOptions } from '@binance/w3w-types'\nimport { getHref, isInBinance } from '@binance/w3w-utils'\nimport { getWagmiConnector } from '@binance/w3w-wagmi-connector'\nimport { Chain, Wallet } from '@rainbow-me/rainbowkit'\nimport type { Connector } from 'wagmi/connectors'\n\nasync function getWalletConnectUri(connector: Connector): Promise<string> {\n  const provider = await connector.getProvider()\n  return new Promise<string>((resolve) => provider.once('uri_ready', resolve))\n}\n\nexport interface BinanceW3WOptions {\n  chains: Chain[]\n  options?: IWCEthRpcConnectionOptions\n}\n\nexport default function rainbowConnector({\n  chains,\n  options,\n}: BinanceW3WOptions): Wallet {\n  const shouldUseWalletConnect = !isInBinance()\n  return {\n    id: 'binance',\n    name: 'Binance Web3 Wallet',\n\n    iconUrl: async () => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      //@ts-ignore\n      const base64: string = (await import('./binanceWallet.svg')).default\n      return `data:image/svg+xml;base64,${base64}`\n    },\n\n    iconAccent: '#1E1E1E',\n    iconBackground: '#1E1E1E',\n    installed: isInBinance() || undefined,\n    downloadUrls: {\n      android: 'https://play.google.com/store/apps/details?id=com.binance.dev',\n      ios: 'https://apps.apple.com/us/app/binance-buy-bitcoin-crypto/id1436799971',\n      mobile: 'https://www.binance.com/en/download',\n      qrCode: 'https://www.binance.com/en/download',\n    },\n\n    createConnector: () => {\n      const Connector = getWagmiConnector()\n      const connector = new Connector({\n        chains,\n        options: { showQrCodeModal: false, ...options },\n      })\n      const getUriMobile = async () => {\n        const uri = await getWalletConnectUri(connector)\n        return getHref(true, uri)\n      }\n\n      const getUriQR = async () => {\n        const uri = await getWalletConnectUri(connector)\n        return uri\n      }\n\n      return {\n        connector,\n        mobile: {\n          getUri: shouldUseWalletConnect ? getUriMobile : undefined,\n        },\n        qrCode: shouldUseWalletConnect\n          ? {\n              getUri: getUriQR,\n              instructions: {\n                learnMoreUrl:\n                  'https://www.binance.com/en/blog/markets/introducing-binance-web3-wallet-5931309459106555347',\n                steps: [\n                  {\n                    description:\n                      'Log in to your Binance app and tap [Wallets]. Go to [Web3].',\n                    step: 'install',\n                    title: 'Open Binance app',\n                  },\n                  {\n                    description:\n                      'Tap [Create Wallet] to start using your Web3 Wallet.',\n                    step: 'create',\n                    title: 'Create or Import a Wallet',\n                  },\n                  {\n                    description:\n                      'After you scan, a connection prompt will appear for you to connect your wallet.',\n                    step: 'scan',\n                    title: 'Tap the scan button',\n                  },\n                ],\n              },\n            }\n          : undefined,\n      }\n    },\n  }\n}\n"]}